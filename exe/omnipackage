#!/usr/bin/env ruby
# frozen_string_literal: true

$LOAD_PATH.unshift ::File.expand_path('../lib', __dir__)

begin
  require 'super_awesome_print'
rescue ::LoadError
end

require 'optparse'
require 'pathname'

require 'omnipackage_agent'
require 'omnipackage_agent/init'
require 'omnipackage_agent/portal'
require 'omnipackage_agent/utils/colorize'

::String.include(::OmnipackageAgent::Utils::Colorize)

default_build_dir = ::Pathname.new(::Dir.tmpdir).join('omnipackage-headless-build').to_s

subtext = <<HELP
Available command are:
  init      creates files required to build your project with OmniPackage
  build     build the project
See '#{$PROGRAM_NAME} COMMAND --help' for more information on a specific command.
HELP

options = {}
global = ::OptionParser.new do |opts|
  opts.banner = "Usage: #{$PROGRAM_NAME} [options] [subcommand [options]]"
  opts.on('-v', '--version', 'show version') do
    puts ::OmnipackageAgent::VERSION
    exit
  end
  opts.on('-h', '--help', 'show help info') do
    puts opts
    exit
  end
  opts.on('-c', '--config CONFIG_FILE', 'path to config file') do |v|
    options[:config] = v
  end
  opts.separator('')
  opts.separator(subtext)
end

subcommands = {
  'init' => ::OptionParser.new do |opts|
    opts.banner = "Usage: #{$PROGRAM_NAME} init [options] path"
    #opts.on("-f", "--[no-]force", "force verbosely") do |v|
    #  options[:force] = v
    #end
  end,

  'build' => ::OptionParser.new do |opts|
    opts.banner = "Usage: #{$PROGRAM_NAME} build [options] path"
    opts.on('-p', '--build-dir BUILD_DIR', "use this directory as temporary for building instead of default (#{default_build_dir})") do |v|
      options[:build_dir] = v
    end
    opts.on('-d', '--distros distro1,distro2', "build only for these distros") do |v|
      options[:distros] = v.split(',')
    end
    opts.on('-s', '--secret KEY1="abc"', "specify build-time secret, can be used multiple times to set multiple secrets") do |v|
      options[:secrets] ||= {}
      k, v = v.split('=')
      options[:secrets][k] = v
    end
  end,

  'portal' => ::OptionParser.new do |opts|
    opts.banner = "Usage: #{$PROGRAM_NAME} portal [options] distro"
    opts.on('-p', '--build-dir BUILD_DIR', "use this directory as temporary for building instead of default (#{default_build_dir})") do |v|
      options[:build_dir] = v
    end
  end,
}

global.order!
command = ::ARGV.shift
rest = if command
  subcommands[command].order!
else
  []
end

config = if options[:config]
  ::OmnipackageAgent::Config.get(options[:config])
else
  ::OmnipackageAgent::Config.get(overrides: {
    build_dir: options[:build_dir] || default_build_dir
  })
end

def print_result(path, results)
  puts "Finished build in #{path}"
  results.each do |o|
    if o.success
      puts "#{o.distro.humanized_name.light_green} success: #{o.artefacts.map(&:to_s).join(', ')}"
    else
      puts "#{o.distro.humanized_name} error: #{o.build_log}".red
    end
  end
end

begin
  ::OmnipackageAgent.check_system_packages!

  case command
  when 'build'
    if rest.empty?
      warn 'you have to specify path'
      warn subcommands['build']
      exit(1)
    end
    logger = ::OmnipackageAgent::Logging::Logger.new
    secrets = ::OmnipackageAgent::Build::Secrets.deserialize(options[:secrets])
    rest.each do |path|
      result = ::OmnipackageAgent::Build.new(logger: logger, config: config, secrets: secrets).call(path, distros: options[:distros])
      print_result(path, result)
    end
  when 'init'
    if rest.empty?
      warn 'you have to specify path'
      warn subcommands['init']
      exit(1)
    end
    rest.each do |path|
      ::OmnipackageAgent::Init.new(path: path, config: config).call
    end
  when 'portal'
    distro = rest[0]
    if distro.nil?
      warn 'you have to specify distro'
      warn subcommands['portal']
      exit(1)
    end
    ::OmnipackageAgent::Portal.new(config: config).call(distro)
  else
  end
rescue ::StandardError => e
  warn "#{e.class}: #{e.message}"
  warn e.backtrace
  exit(1)
rescue ::Interrupt
  warn 'quitting...'
  exit(0)
end
